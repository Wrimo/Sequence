# grammar for the language 
# written in Chomsky Normal Form so the CYK Algorithm will work 

S -> NEWLINE | StatementList StatementEnd | PrintState PrintState2 | AssignState Expr | IfState IfState2 

# statement level constructions
StatementList -> Statement StatementListRec | PrintState PrintState2 | AssignState Expr | IfState IfState2 
StatementListRec -> StatementEnd StatementList
Statement -> PrintState PrintState2 | AssignState Expr | IfState IfState2 

PrintState -> PrintKeyword RParen
PrintState2 -> Expr LParen 

AssignState -> Identifier Assign

IfState -> If Expr
IfState2 -> RBracket IfState3
IfState3 -> StatementEnd IfState4 
IfState4 -> StatementList IfState5 
IfState5 -> StatementEnd LBracket

# grammar for expressions 
Expr -> INTEGER | IDENTIFIER | Prev Identifier | RParen Expr_CloseExpr | Term MulOp_Factor | Expr1 CompOp_Expr1 | Expr AddOp_Term
Expr1 -> INTEGER | IDENTIFIER | Prev Identifier | RParen Expr_CloseExpr | Term MulOp_Factor | Expr1 CompOp_Expr1 
Term -> INTEGER  | IDENTIFIER | Prev Identifier | RParen Expr_Close | Term MulOp_factor 
Factor -> INTEGER | IDENTIFIER | Prev Identifier | RParen Expr_Close

Expr_Close -> Expr LParen
CompOp_Expr1 -> CompOp Expr1
MulOp_Factor -> MulOp Factor
AddOp_Term -> AddOp Term 

CompOp -> EQUALOP | NOTEQUALOP | GTHANOP | GETHANOP | LTHANOP | LETHANOP
MulOp -> MULOP | DIVOP | MODOP
AddOp -> ADDOP | SUBOP


# simple nonterminals to encode terminals (allows them to be concatted)
RBracket -> RBRACKET 
LBracket -> LBRACKET
RParen -> RPAREN 
LParen -> LPAREN 
Identifier -> IDENTIFIER
PrintKeyword -> PRINT
StatementEnd -> NEWLINE 
Assign -> ASSIGNMENT
Int -> INTEGER
Prev -> PREV
If -> IF
None -> NONE