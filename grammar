<S> ::= <StatementList> NEWLINE | NEWLINE

# statement level constructions
<StatementList> ::= <Statement> NEWLINE <StatementList> | <Statement>
<Statement> ::= <PrintState> | <AssignState> | <IfState> | <BeginState> | <ExpectState> | <RevealState>
<CodeBlock> ::= RBRACKET NEWLINE <StatementList> NEWLINE LBRACKET
<RevealState> ::= REVEAL RPAREN IDENTIFIER LPAREN
<PrintState> ::= PRINT RPAREN <Expr> LPAREN
<AssignState> ::= IDENTIFIER ASSIGNMENT <Expr>
<IfState> ::= IF <Expr> <CodeBlock> | IF <Expr> <CodeBlock> <ElseList>

<ElseList> ::= <ElseIf> <ElseList> | <ElseIf> | <Else>
<ElseIf> ::= VERTICALBAR <Expr> <CodeBlock> 
<Else> ::= VERTICALBAR <CodeBlock>


<BeginState> ::= BEGIN <CodeBlock>
<ExpectState> ::= EXPECT <Expr> <CodeBlock>

# grammar for expressions
<Expr> ::= <Expr> <CompOp> <Expr1> | <Expr1>
<Expr1> ::= <Expr1> <AddOp> <Term> | <Term>
<Term> ::= <Term> <MulOp> <Factor> | <Factor>
<Factor> ::= INTEGER | IDENTIFIER | <Bool> | PREV IDENTIFIER | RPAREN <Expr> LPAREN
<CompOp> ::= EQUALOP | NOTEQUALOP | GTHANOP | GETHANOP | LTHANOP | LETHANOP
<MulOp> ::= MULOP | DIVOP | MODOP
<AddOp> ::= ADDOP | SUBOP

<Bool> ::= TRUE | FALSE